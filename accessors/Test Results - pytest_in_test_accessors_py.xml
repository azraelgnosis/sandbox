<?xml version="1.0" encoding="UTF-8"?><testrun duration="602" footerText="Generated by PyCharm on 7/7/21, 5:35 AM" name="pytest in test_accessors.py">
    <count name="total" value="216"/>
    <count name="failed" value="199"/>
    <count name="passed" value="17"/>
    <config nameIsGenerated="true" configId="tests" name="pytest in test_accessors.py">
        <module name="sandbox"/>
        <option name="INTERPRETER_OPTIONS" value=""/>
        <option name="PARENT_ENVS" value="true"/>
        <option name="SDK_HOME" value=""/>
        <option name="WORKING_DIRECTORY" value="C:/~/python/sandbox/accessors"/>
        <option name="IS_MODULE_SDK" value="true"/>
        <option name="ADD_CONTENT_ROOTS" value="true"/>
        <option name="ADD_SOURCE_ROOTS" value="true"/>
        <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py"/>
        <option name="_new_keywords" value="&quot;&quot;"/>
        <option name="_new_parameters" value="&quot;&quot;"/>
        <option name="_new_additionalArguments" value="&quot;&quot;"/>
        <option name="_new_target" value="&quot;C:/~/python/sandbox/accessors/test_accessors.py&quot;"/>
        <option name="_new_targetType" value="&quot;PATH&quot;"/>
        <method v="2"/>
    </config>
    <suite duration="602" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors" name="test_accessors" status="failed">
        <suite duration="602" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters" name="test_getters" status="failed">
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  0%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  0%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [  1%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [  1%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [  2%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [  2%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  3%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-super().__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  3%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-super().__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [  4%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [  4%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-super().__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [  5%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="passed">
                <output type="stdout">PASSED [  5%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  6%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  6%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [  6%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [  7%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [  7%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [  8%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  8%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [  9%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [  9%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 10%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 10%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 11%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 11%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 12%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 12%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 12%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-self[item])" metainfo="__getattribute__(attr)-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 13%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-self[attribute]-getattr(self, item))" metainfo="__getattribute__(attr)-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 13%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 14%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 14%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 15%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 15%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-self[item])" metainfo="__getattribute__(attr)-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 16%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattribute__(attr)-getattr(self, attribute)-getattr(self, item))" metainfo="__getattribute__(attr)-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 16%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattribute__(attr)-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761550&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 17%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 17%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 18%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 18%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="25" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 18%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 19%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
test_accessors.py:38: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattribute__(attribute), id=&amp;#39;self.__getattribute__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 19%]
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 20%]
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 20%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
            assert tc.x, tc.y == (1, 5)
&amp;gt;           assert tc[&amp;#39;x&amp;#39;], tc[&amp;#39;y&amp;#39;] == (1, 5)
test_accessors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="passed">
                <output type="stdout">PASSED [ 21%]
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 21%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
            assert tc.x, tc.y == (1, 5)
&amp;gt;           assert tc[&amp;#39;x&amp;#39;], tc[&amp;#39;y&amp;#39;] == (1, 5)
test_accessors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:33: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self[item], id=&amp;#39;self[item]&amp;#39;),
test_accessors.py:33: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self[item], id=&amp;#39;self[item]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="passed">
                <output type="stdout">PASSED [ 22%]
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 22%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 23%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 23%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 24%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 24%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 25%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
test_accessors.py:40: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getitem__(attribute), id=&amp;#39;self.__getitem__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="6" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 25%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="6" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 25%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 26%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 26%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 27%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 27%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
test_accessors.py:41: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self.__getattr__(attribute), id=&amp;#39;self.__getattr__(attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 28%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:29: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getattribute__(item), id=&amp;#39;self.__getattribute__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:29: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getattribute__(item), id=&amp;#39;self.__getattribute__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 28%]
</output>
            </test>
            <test duration="7" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 29%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 29%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:32: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getattr__(item), id=&amp;#39;self.__getattr__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:32: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getattr__(item), id=&amp;#39;self.__getattr__(item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-self[item])" metainfo="__getattribute__(attr)-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 30%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:33: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self[item], id=&amp;#39;self[item]&amp;#39;),
test_accessors.py:33: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self[item], id=&amp;#39;self[item]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-self[attribute]-getattr(self, item))" metainfo="__getattribute__(attr)-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 30%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="11" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 31%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="11" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 31%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="6" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 31%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="6" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 32%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-self[item])" metainfo="__getattribute__(attr)-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 32%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(super()___getattribute__(attr)-getattr(self, attribute)-getattr(self, item))" metainfo="__getattribute__(attr)-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 33%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[super().__getattribute__(attr)-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557615E0&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 33%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 34%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 34%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 35%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 35%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 36%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 36%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-super().__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 37%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-super().__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 37%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 37%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-super().__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 38%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="passed">
                <output type="stdout">PASSED [ 38%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 39%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 39%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 40%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 40%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 41%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 41%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 42%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 42%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 43%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 43%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 43%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 44%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 44%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 45%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 45%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 46%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-self[item])" metainfo="__getitem__(attr)-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 46%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-self[attribute]-getattr(self, item))" metainfo="__getitem__(attr)-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 47%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 47%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 48%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 48%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 49%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-self[item])" metainfo="__getitem__(attr)-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 49%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getitem__(attr)-getattr(self, attribute)-getattr(self, item))" metainfo="__getitem__(attr)-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 50%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getitem__(attr)-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761670&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 50%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 50%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 51%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 51%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 52%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 52%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 53%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 53%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 54%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 54%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 55%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 55%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-super().__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
            assert tc.x, tc.y == (1, 5)
            assert tc[&amp;#39;x&amp;#39;], tc[&amp;#39;y&amp;#39;] == (1, 5)
            assert getattr(tc, &amp;#39;x&amp;#39;), getattr(tc, &amp;#39;y&amp;#39;) == (1, 5)
            assert tc.__getattribute__(&amp;#39;x&amp;#39;), tc.__getattribute__(&amp;#39;y&amp;#39;) == (1, 5)
            assert tc.__getitem__(&amp;#39;x&amp;#39;), tc.__getitem__(&amp;#39;y&amp;#39;) == (1, 5)
&amp;gt;           assert tc.__getattr__(&amp;#39;x&amp;#39;), tc.__getattr__(&amp;#39;y&amp;#39;) == (1, 5)
test_accessors.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:50: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attr: self.__getattr__(attr), id=&amp;#39;self.__getattr__(attr)&amp;#39;),
test_accessors.py:50: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attr: self.__getattr__(attr), id=&amp;#39;self.__getattr__(attr)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 56%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 56%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 56%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 57%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 57%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 58%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 58%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 59%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 59%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 60%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 60%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 61%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 61%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 62%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
            assert tc.x, tc.y == (1, 5)
            assert tc[&amp;#39;x&amp;#39;], tc[&amp;#39;y&amp;#39;] == (1, 5)
            assert getattr(tc, &amp;#39;x&amp;#39;), getattr(tc, &amp;#39;y&amp;#39;) == (1, 5)
            assert tc.__getattribute__(&amp;#39;x&amp;#39;), tc.__getattribute__(&amp;#39;y&amp;#39;) == (1, 5)
            assert tc.__getitem__(&amp;#39;x&amp;#39;), tc.__getitem__(&amp;#39;y&amp;#39;) == (1, 5)
&amp;gt;           assert tc.__getattr__(&amp;#39;x&amp;#39;), tc.__getattr__(&amp;#39;y&amp;#39;) == (1, 5)
test_accessors.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:50: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attr: self.__getattr__(attr), id=&amp;#39;self.__getattr__(attr)&amp;#39;),
test_accessors.py:50: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attr: self.__getattr__(attr), id=&amp;#39;self.__getattr__(attr)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 62%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 62%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-self[item])" metainfo="__getattr__(attr)-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 63%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="3" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-self[attribute]-getattr(self, item))" metainfo="__getattr__(attr)-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 63%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 64%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 64%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 65%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 65%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-self[item])" metainfo="__getattr__(attr)-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 66%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self___getattr__(attr)-getattr(self, attribute)-getattr(self, item))" metainfo="__getattr__(attr)-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 66%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self.__getattr__(attr)-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761700&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 67%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 67%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 68%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 68%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 68%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 69%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 69%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-super().__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 70%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 70%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 71%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-super().__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 71%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="passed">
                <output type="stdout">PASSED [ 72%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 72%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 73%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 73%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 74%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 74%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 75%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 75%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 75%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 76%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 76%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 77%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 77%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 78%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 78%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 79%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 79%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-self[item])" metainfo="test_getters[self[attr]-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 80%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-self[attribute]-getattr(self, item))" metainfo="test_getters[self[attr]-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 80%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 81%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="12" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 81%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 81%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 82%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-self[item])" metainfo="test_getters[self[attr]-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 82%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(self[attr]-getattr(self, attribute)-getattr(self, item))" metainfo="test_getters[self[attr]-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 83%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[self[attr]-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761790&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 83%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 84%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 84%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 85%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 85%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 86%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattribute__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557610D0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 86%]
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 87%]
</output>
            </test>
            <test duration="6" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 87%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-super().__getattribute__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
            assert tc.x, tc.y == (1, 5)
&amp;gt;           assert tc[&amp;#39;x&amp;#39;], tc[&amp;#39;y&amp;#39;] == (1, 5)
test_accessors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
test_accessors.py:31: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: self.__getitem__(item), id=&amp;#39;self.__getitem__(item)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="4" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="passed">
                <output type="stdout">PASSED [ 87%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-self[item])" metainfo="__getattribute__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 88%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-super().__getattribute__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761040&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="7" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-super()___getattribute__(attribute)-getattr(self, item))" metainfo="__getattribute__(attribute)-getattr(self, item)]" status="passed">
                <output type="stdout">PASSED [ 88%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 89%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 89%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 90%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 90%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-self[item])" metainfo="__getitem__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 91%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getitem__(attribute)-getattr(self, item))" metainfo="__getitem__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 91%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getitem__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761310&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 92%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 92%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 93%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 93%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-self[item])" metainfo="__getattr__(attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 93%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self___getattr__(attribute)-getattr(self, item))" metainfo="__getattr__(attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 94%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self.__getattr__(attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557613A0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 94%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self[attribute]-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="passed">
                <output type="stdout">PASSED [ 95%]
</output>
            </test>
            <test duration="1" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 95%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self[attribute]-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 96%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self[attribute]-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="0" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-self[item])" metainfo="test_getters[getattr(self, attr)-self[attribute]-self[item]]" status="failed">
                <output type="stdout">FAILED [ 96%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self[attribute]-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
&amp;gt;           raise OverflowError
E           OverflowError
test_accessors.py:82: OverflowError
</output>
            </test>
            <test duration="10" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-self[attribute]-getattr(self, item))" metainfo="test_getters[getattr(self, attr)-self[attribute]-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [ 97%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-self[attribute]-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761430&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
test_accessors.py:34: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, item: getattr(self, item), id=&amp;#39;getattr(self, item)&amp;#39;),
test_accessors.py:42: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: self[attribute], id=&amp;#39;self[attribute]&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="8" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-self___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 97%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-self.__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CE50&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-super()___getattribute__(item))" metainfo="__getattribute__(item)]" status="failed">
                <output type="stdout">FAILED [ 98%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-super().__getattribute__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CCA0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-self___getitem__(item))" metainfo="__getitem__(item)]" status="failed">
                <output type="stdout">FAILED [ 98%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-self.__getitem__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CA60&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="5" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-self___getattr__(item))" metainfo="__getattr__(item)]" status="failed">
                <output type="stdout">FAILED [ 99%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-self.__getattr__(item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D15571CAF0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="9" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-self[item])" metainfo="test_getters[getattr(self, attr)-getattr(self, attribute)-self[item]]" status="failed">
                <output type="stdout">FAILED [ 99%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-self[item]])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557611F0&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
            <test duration="12" locationUrl="python&lt;C:\~\python\sandbox\accessors&gt;://test_accessors.test_getters." name="(getattr(self, attr)-getattr(self, attribute)-getattr(self, item))" metainfo="test_getters[getattr(self, attr)-getattr(self, attribute)-getattr(self, item)]" status="failed">
                <output type="stdout">FAILED [100%]
</output>
                <output type="stderr">test_accessors.py:66 (test_getters[getattr(self, attr)-getattr(self, attribute)-getattr(self, item)])get_item = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761160&amp;gt;
get_attribute = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D1557614C0&amp;gt;
get_attr = &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D155761820&amp;gt;
    @pytest.mark.parametrize(&amp;#39;get_item&amp;#39;, getitems)
    @pytest.mark.parametrize(&amp;#39;get_attribute&amp;#39;, getattributes)
    @pytest.mark.parametrize(&amp;#39;get_attr&amp;#39;, getattrs)
    def test_getters(get_item, get_attribute, get_attr):
        tc = TestClass(1, 5, get_item, get_attribute, get_attr)
    
        getter_dict = {
            &amp;#39;get_attr&amp;#39;: get_lambda_bytecode(get_attr),
            &amp;#39;get_attribute&amp;#39;: get_lambda_bytecode(get_attribute),
            &amp;#39;get_item&amp;#39;: get_lambda_bytecode(get_item)}
    
        with open(BAD_COMBOS_PATH) as f:
            bad_combos = json.load(f)
    
        if any(combo == getter_dict for combo in bad_combos):
            raise OverflowError
    
        bad_combos.append(getter_dict)
        with open(BAD_COMBOS_PATH, &amp;quot;w&amp;quot;) as f:
            json.dump(bad_combos, f, indent=4)
    
        try:
&amp;gt;           assert tc.x, tc.y == (1, 5)
test_accessors.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
test_accessors.py:43: in &amp;lt;lambda&amp;gt;
    pytest.param(lambda self, attribute: getattr(self, attribute), id=&amp;#39;getattr(self, attribute)&amp;#39;),
E   RecursionError: maximum recursion depth exceeded while calling a Python object
!!! Recursion detected (same locals &amp;amp; position)
</output>
            </test>
        </suite>
    </suite>
</testrun>
